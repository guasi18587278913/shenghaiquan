// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  phone         String?   @unique
  email         String?   @unique
  password      String?
  name          String?
  avatar        String?
  bio           String?
  location      String?
  company       String?
  position      String?
  skills        String?   // JSON string for SQLite
  level         Int       @default(1)
  points        Int       @default(0)
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastActiveAt  DateTime  @default(now())

  // 关系
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("FollowerRelation")
  following     Follow[]  @relation("FollowingRelation")
  enrollments   Enrollment[]
  sentDirectMessages     DirectMessage[] @relation("DirectMessageSender")
  receivedDirectMessages DirectMessage[] @relation("DirectMessageReceiver")
  
  // IM相关
  conversations  ConversationParticipant[]
  sentMessages   Message[]
  readMessages   MessageRead[]
  onlineStatus   UserOnlineStatus?
  
  // IM设置
  allowChat      Boolean @default(true)  // 是否允许他人发起聊天
  chatNotification Boolean @default(true) // 是否接收聊天通知
  notifications Notification[]
  events        EventParticipant[]
  bookmarks     Bookmark[]
  lessonNotes   LessonNote[]
}

enum UserRole {
  USER
  ADMIN
  TEACHER
  ASSISTANT
}

// 动态模型
model Post {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String?
  content       String
  type          PostType  @default(GENERAL)
  tags          String?   // JSON string for SQLite
  images        String?   // JSON string for SQLite
  isPinned      Boolean   @default(false)
  viewCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
}

enum PostType {
  ANNOUNCEMENT
  PROJECT
  TECH_DISCUSSION
  EXPERIENCE
  HELP
  ACTIVITY
  GENERAL
}

// 评论模型
model Comment {
  id            String    @id @default(cuid())
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  content       String
  parentId      String?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  likes         Like[]
}

// 点赞模型
model Like {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  postId        String?
  post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId     String?
  comment       Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// 关注模型
model Follow {
  id            String    @id @default(cuid())
  followerId    String
  follower      User      @relation("FollowerRelation", fields: [followerId], references: [id])
  followingId   String
  following     User      @relation("FollowingRelation", fields: [followingId], references: [id])
  createdAt     DateTime  @default(now())

  @@unique([followerId, followingId])
}

// 课程篇章模型（前言、基础篇、认知篇等）
model CourseSection {
  id            String    @id @default(cuid())
  title         String    // 前言/基础篇/认知篇等
  description   String?
  slug          String    @unique // preface/basic/cognition等
  order         Int
  requiredTier  MembershipTier @default(FREE) // 会员等级要求
  icon          String?   // 图标
  color         String?   // 主题色
  
  courses       Course[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 课程模型
model Course {
  id            String    @id @default(cuid())
  title         String
  description   String?
  slug          String    @unique
  order         Int       @default(0)
  
  sectionId     String
  section       CourseSection @relation(fields: [sectionId], references: [id])
  
  chapters      Chapter[]
  enrollments   Enrollment[]
  
  totalDuration Int       @default(0) // 总时长(秒)
  totalLessons  Int       @default(0) // 总课时数
  
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 章节模型
model Chapter {
  id            String    @id @default(cuid())
  title         String
  description   String?
  order         Int       @default(0)
  
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  lessons       Lesson[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 课时模型
model Lesson {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          LessonType // VIDEO_TEXT, TEXT_ONLY
  order         Int       @default(0)
  
  chapterId     String
  chapter       Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // 内容
  content       String?   @db.Text // Markdown格式的文稿
  videoId       String?   // 腾讯云点播fileId
  videoDuration Int       @default(0) // 时长(秒)
  
  // 扩展内容
  attachments   String?   // JSON附件列表
  codeExamples  String?   // JSON代码示例
  homework      String?   // 作业内容
  
  // 访问控制
  isFree        Boolean   @default(false)
  
  progress      Progress[]
  notes         LessonNote[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 直播回放模型
model LiveReplay {
  id            String    @id @default(cuid())
  title         String
  description   String?
  category      String    // product-selection/technical-qa/case-study
  
  videoId       String    // 腾讯云点播fileId
  videoDuration Int       // 时长(秒)
  
  liveDate      DateTime  // 直播日期
  presenter     String    // 主讲人
  
  attachments   String?   // JSON附件
  
  isPublished   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 课时笔记模型
model LessonNote {
  id            String    @id @default(cuid())
  content       String    @db.Text
  
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  
  lessonId      String
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  timestamp     Int?      // 视频时间点(秒)
  isPublic      Boolean   @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, lessonId])
}

enum LessonType {
  VIDEO_TEXT   // 视频+图文
  TEXT_ONLY    // 纯图文
}

enum MembershipTier {
  FREE         // 免费
  ANNUAL       // 年度会员
}

// 课程报名模型
model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id])
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  progress      Float     @default(0)

  @@unique([userId, courseId])
}

// 学习进度模型
model Progress {
  id            String    @id @default(cuid())
  userId        String
  lessonId      String
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  watchTime     Int       @default(0) // 观看时长（秒）
  lastPosition  Int       @default(0) // 上次播放位置（秒）
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, lessonId])
}

// 直接消息模型（原Message模型，用于简单的私信功能）
model DirectMessage {
  id            String    @id @default(cuid())
  senderId      String
  sender        User      @relation("DirectMessageSender", fields: [senderId], references: [id])
  receiverId    String
  receiver      User      @relation("DirectMessageReceiver", fields: [receiverId], references: [id])
  content       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  @@index([senderId, receiverId])
  @@index([receiverId, isRead])
}

// IM会话表
model Conversation {
  id           String   @id @default(cuid())
  type         String   // 'C2C' | 'GROUP'
  name         String?  // 群聊名称
  avatar       String?  // 群聊头像
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  participants ConversationParticipant[]
  messages     Message[]
}

// 会话参与者
model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  unreadCount    Int      @default(0)
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  
  @@unique([conversationId, userId])
}

// IM消息表
model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  type           String   @default("text") // 'text' | 'image' | 'file' | 'video'
  content        String   @db.Text
  metadata       Json?    // 存储额外信息，如文件URL、图片尺寸等
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender        User         @relation(fields: [senderId], references: [id])
  readBy        MessageRead[]
}

// 消息已读记录
model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([messageId, userId])
}

// 用户在线状态
model UserOnlineStatus {
  id         String   @id @default(cuid())
  userId     String   @unique
  isOnline   Boolean  @default(false)
  lastSeenAt DateTime @default(now())
  platform   String?  // 'web' | 'mobile' | 'desktop'
  
  user       User     @relation(fields: [userId], references: [id])
}

// 通知模型
model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          NotificationType
  title         String
  content       String
  link          String?
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

enum NotificationType {
  SYSTEM
  COMMENT
  LIKE
  FOLLOW
  COURSE
  EVENT
}

// 标签模型
model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  postCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 活动模型（日历功能）
model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          EventType
  startTime     DateTime
  endTime       DateTime?
  location      String?   // 线上/线下地点
  onlineUrl     String?   // 线上活动链接
  organizer     String?   // 组织者
  maxParticipants Int?    // 最大参与人数
  isPublished   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  participants  EventParticipant[]
}

enum EventType {
  OFFICIAL_LIVE    // 官方直播
  OFFLINE_MEETUP   // 线下聚会
  TRAINING_CAMP    // 实战营
  MILESTONE        // 里程碑
}

// 活动参与者
model EventParticipant {
  id            String    @id @default(cuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  joinedAt      DateTime  @default(now())
  
  @@unique([eventId, userId])
}

// 文章模型（资讯功能）
model Article {
  id            String    @id @default(cuid())
  title         String
  summary       String?   // 摘要
  content       String    // Markdown内容
  cover         String?   // 封面图
  category      ArticleCategory
  tags          String?   // JSON数组
  author        String    @default("深海圈编辑部")
  viewCount     Int       @default(0)
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ArticleCategory {
  INDUSTRY_NEWS    // 行业动态
  PRODUCT_CASE     // 产品案例
  TECH_FRONTIER    // 技术前沿
  COMMUNITY_NEWS   // 深海圈动态
  OVERSEAS_EXP     // 出海经验
}

// 收藏模型
model Bookmark {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  
  @@unique([userId, postId])
}
