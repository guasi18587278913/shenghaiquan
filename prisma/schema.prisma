// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  phone         String?   @unique
  email         String?   @unique
  password      String?
  name          String?
  avatar        String?
  bio           String?
  location      String?
  company       String?
  position      String?
  skills        String?   // JSON string for SQLite
  level         Int       @default(1)
  points        Int       @default(0)
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastActiveAt  DateTime  @default(now())

  // 关系
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("FollowerRelation")
  following     Follow[]  @relation("FollowingRelation")
  enrollments   Enrollment[]
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  notifications Notification[]
  events        EventParticipant[]
  bookmarks     Bookmark[]
}

enum UserRole {
  USER
  ADMIN
  TEACHER
  ASSISTANT
}

// 动态模型
model Post {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String?
  content       String
  type          PostType  @default(GENERAL)
  tags          String?   // JSON string for SQLite
  images        String?   // JSON string for SQLite
  isPinned      Boolean   @default(false)
  viewCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  comments      Comment[]
  likes         Like[]
  bookmarks     Bookmark[]
}

enum PostType {
  ANNOUNCEMENT
  PROJECT
  TECH_DISCUSSION
  EXPERIENCE
  HELP
  ACTIVITY
  GENERAL
}

// 评论模型
model Comment {
  id            String    @id @default(cuid())
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  content       String
  parentId      String?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  likes         Like[]
}

// 点赞模型
model Like {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  postId        String?
  post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId     String?
  comment       Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

// 关注模型
model Follow {
  id            String    @id @default(cuid())
  followerId    String
  follower      User      @relation("FollowerRelation", fields: [followerId], references: [id])
  followingId   String
  following     User      @relation("FollowingRelation", fields: [followingId], references: [id])
  createdAt     DateTime  @default(now())

  @@unique([followerId, followingId])
}

// 课程模型
model Course {
  id            String    @id @default(cuid())
  title         String
  description   String
  cover         String?
  category      CourseCategory
  level         CourseLevel
  price         Float     @default(0)
  isPaid        Boolean   @default(false)
  isPublished   Boolean   @default(false)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  chapters      Chapter[]
  enrollments   Enrollment[]
}

enum CourseCategory {
  START_HERE
  BASIC
  ADVANCED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// 章节模型
model Chapter {
  id            String    @id @default(cuid())
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title         String
  description   String?
  content       String
  videoUrl      String?
  duration      Int?      // 视频时长（秒）
  order         Int       @default(0)
  isLocked      Boolean   @default(true)
  unlockType    UnlockType @default(SEQUENTIAL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关系
  progress      Progress[]
}

enum UnlockType {
  SEQUENTIAL    // 顺序解锁
  TIME_BASED   // 时间解锁
  TASK_BASED   // 任务解锁
  PAID         // 付费解锁
}

// 课程报名模型
model Enrollment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  courseId      String
  course        Course    @relation(fields: [courseId], references: [id])
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  progress      Float     @default(0)

  @@unique([userId, courseId])
}

// 学习进度模型
model Progress {
  id            String    @id @default(cuid())
  userId        String
  chapterId     String
  chapter       Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  watchTime     Int       @default(0) // 观看时长（秒）
  lastPosition  Int       @default(0) // 上次播放位置（秒）
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, chapterId])
}

// 消息模型
model Message {
  id            String    @id @default(cuid())
  senderId      String
  sender        User      @relation("MessageSender", fields: [senderId], references: [id])
  receiverId    String
  receiver      User      @relation("MessageReceiver", fields: [receiverId], references: [id])
  content       String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  @@index([senderId, receiverId])
  @@index([receiverId, isRead])
}

// 通知模型
model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          NotificationType
  title         String
  content       String
  link          String?
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

enum NotificationType {
  SYSTEM
  COMMENT
  LIKE
  FOLLOW
  COURSE
  EVENT
}

// 标签模型
model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  postCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// 活动模型（日历功能）
model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          EventType
  startTime     DateTime
  endTime       DateTime?
  location      String?   // 线上/线下地点
  onlineUrl     String?   // 线上活动链接
  organizer     String?   // 组织者
  maxParticipants Int?    // 最大参与人数
  isPublished   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // 关系
  participants  EventParticipant[]
}

enum EventType {
  OFFICIAL_LIVE    // 官方直播
  OFFLINE_MEETUP   // 线下聚会
  TRAINING_CAMP    // 实战营
  MILESTONE        // 里程碑
}

// 活动参与者
model EventParticipant {
  id            String    @id @default(cuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  joinedAt      DateTime  @default(now())
  
  @@unique([eventId, userId])
}

// 文章模型（资讯功能）
model Article {
  id            String    @id @default(cuid())
  title         String
  summary       String?   // 摘要
  content       String    // Markdown内容
  cover         String?   // 封面图
  category      ArticleCategory
  tags          String?   // JSON数组
  author        String    @default("深海圈编辑部")
  viewCount     Int       @default(0)
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ArticleCategory {
  INDUSTRY_NEWS    // 行业动态
  PRODUCT_CASE     // 产品案例
  TECH_FRONTIER    // 技术前沿
  COMMUNITY_NEWS   // 深海圈动态
  OVERSEAS_EXP     // 出海经验
}

// 收藏模型
model Bookmark {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  postId        String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  
  @@unique([userId, postId])
}
